AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Student Grading System Lambda - V1

Parameters:
  carTableName:
    Type: String
    Default: car
    Description: (Required) The name of the new DynamoDB table you want to create and save to. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z]+$
    ConstraintDescription: Required parameter. Must be characters only. No numbers allowed.
  carModelTableName:
      Type: String
      Default: carmodel
      Description: (Required) The name of the new DynamoDB table you want to create and save to. Minimum 3 characters
      MinLength: 3
      MaxLength: 50
      AllowedPattern: ^[A-Za-z]+$
      ConstraintDescription: Required parameter. Must be characters only. No numbers allowed.
      
Resources:

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        DefaultAuthorizer: MyLambdaTokenAuthorizer
        Authorizers: 
          MyLambdaTokenAuthorizer:
            FunctionArn: !GetAtt MyAuthFunction.Arn
            
  ModelSearchFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.modelSearchService
      Runtime: nodejs14.x
      CodeUri: .
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref carModelTableName
      Environment:
        Variables:
          TABLE_NAME1: !Ref carModelTableName 
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /get-car-model/{modelName}
            Method: GET
      Timeout: 100
 
  PriceRetrievalFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.priceRetrievalService
      Runtime: nodejs14.x
      CodeUri: .
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref carTableName
      Environment:
        Variables:
          TABLE_NAME: !Ref carTableName  
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /get-car-price/{itemId}
            Method: GET
      Timeout: 100
 
  StudentLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.studentService
      Runtime: nodejs14.x
      CodeUri: ./LambdaCodeNodeJS
      #Policies:
      #  - DynamoDBCrudPolicy:
      #      TableName: !Ref carModelTableName
      #Environment:
      #  Variables:
      #    TABLE_NAME1: !Ref carModelTableName 
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /getStudentsList
            Method: get
      Timeout: 100
      
  StudentGradingLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: student_lambda_function.student_handler
      Runtime: python3.6
      CodeUri: ./LambdaCode
      Description: 'Lambda function for student grading system'
      MemorySize: 128
      Timeout: 30
      Events:
        SearchModelAPI:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /getstudents
            Method: get
      Environment:
        Variables:
          REGION: ap-southeast-1

  CarDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref carTableName
      AttributeDefinitions:
        - AttributeName: itemId
          AttributeType: S
      KeySchema:
        - AttributeName: itemId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  CarModelDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref carModelTableName
      AttributeDefinitions:
        - AttributeName: modelId
          AttributeType: S
      KeySchema:
        - AttributeName: modelId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      
  MyAuthFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./authorizer
      Handler: handler.authorizer
      Runtime: nodejs14.x
 
Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref MyApi

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/dev/'
